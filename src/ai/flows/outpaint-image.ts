'use server';

/**
 * @fileOverview Expands an image to a 16:9 aspect ratio using Imagen's outpainting feature.
 *
 * - outpaintImage - A function that handles the image outpainting process.
 * - OutpaintImageInput - The input type for the outpaintImage function.
 * - OutpaintImageOutput - The return type for the outpaintImage function.
 */

import {z} from 'zod';
import {v1, helpers} from '@google-cloud/aiplatform';
import Jimp from 'jimp';

// Configure the client
const {PredictionServiceClient} = v1;
const clientOptions = {
  apiEndpoint: 'us-central1-aiplatform.googleapis.com',
};
const predictionServiceClient = new PredictionServiceClient(clientOptions);

const OutpaintImageInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "The image to outpaint, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
});
export type OutpaintImageInput = z.infer<typeof OutpaintImageInputSchema>;

const OutpaintImageOutputSchema = z.object({
  generatedImageDataUri: z
    .string()
    .describe(
      "The outpainted image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
});
export type OutpaintImageOutput = z.infer<typeof OutpaintImageOutputSchema>;

export async function outpaintImage(
  input: OutpaintImageInput
): Promise<OutpaintImageOutput> {
  const projectId =
    process.env.GCP_PROJECT || (await predictionServiceClient.getProjectId());
  const location = 'us-central1';

  // This model supports image editing capabilities like outpainting.
  const endpoint = `projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-capability-001`;

  const imageBase64 = input.imageDataUri.split(',')[1];
  const imageBuffer = Buffer.from(imageBase64, 'base64');

  // Use jimp to create a mask for outpainting
  const image = await Jimp.read(imageBuffer);
  const {width, height} = image.bitmap;

  let targetWidth = width;
  let targetHeight = height;
  const targetAspectRatio = 16 / 9;
  const originalAspectRatio = width / height;

  if (originalAspectRatio < targetAspectRatio) {
    // Image is taller than 16:9, so expand width
    targetWidth = Math.round(height * targetAspectRatio);
  } else if (originalAspectRatio > targetAspectRatio) {
    // Image is wider than 16:9, so expand height
    targetHeight = Math.round(width / targetAspectRatio);
  } else {
    // Image is already 16:9, no need to outpaint
    return {generatedImageDataUri: input.imageDataUri};
  }

  const maskImage = image.clone();
  // Resize canvas, letterboxing with black
  maskImage.contain(targetWidth, targetHeight);
  // Turn non-black parts white to create the final mask
  maskImage.threshold({max: 1, autoGreyscale: true});

  const maskBuffer = await maskImage.getBufferAsync(Jimp.MIME_PNG);
  const maskBase64 = maskBuffer.toString('base64');

  const instance = {
    prompt: `Photorealistically outpaint this image by filling in the black areas of the mask. The filled areas should logically and aesthetically continue the original scene.`,
    image: {
      bytesBase64Encoded: imageBase64,
    },
    mask: {
      image: {
        bytesBase64Encoded: maskBase64,
      },
    },
  };

  const instances = [helpers.toValue(instance)];

  const parameters = helpers.toValue({
    sampleCount: 1,
    // Aspect ratio is now controlled by the mask
  });

  const request = {
    endpoint,
    instances,
    parameters,
  };

  try {
    const [response] = await predictionServiceClient.predict(request);

    if (!response.predictions || response.predictions.length === 0) {
      throw new Error('No image was generated by Vertex AI for outpainting.');
    }

    const prediction = helpers.fromValue(response.predictions[0] as any);

    if (!prediction || !prediction.bytesBase64Encoded) {
      throw new Error('No image data found in Vertex AI response for outpainting.');
    }

    const generatedImageDataUri = `data:image/png;base64,${prediction.bytesBase64Encoded}`;

    return {generatedImageDataUri};
  } catch (error) {
    console.error('Vertex AI Outpainting Prediction Error:', error);
    throw new Error('Failed to outpaint image with Vertex AI.');
  }
}
