'use server';

/**
 * @fileOverview Generates an image of a clothing item from a text description using the @google-cloud/vertexai library.
 *
 * - generateClothingImage - A function that handles the clothing image generation.
 * - GenerateClothingImageInput - The input type for the generateClothingImage function.
 * - GenerateClothingImageOutput - The return type for the generateClothingImage function.
 */

import {z} from 'zod';
import {VertexAI} from '@google-cloud/vertexai';

const GenerateClothingImageInputSchema = z.object({
  description: z.string().describe('A text description of the clothing item.'),
});
export type GenerateClothingImageInput = z.infer<typeof GenerateClothingImageInputSchema>;

const GenerateClothingImageOutputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "The generated clothing image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
});
export type GenerateClothingImageOutput = z.infer<typeof GenerateClothingImageOutputSchema>;

export async function generateClothingImage(
  input: GenerateClothingImageInput
): Promise<GenerateClothingImageOutput> {
  const vertexAIOptions: { location: string, project?: string } = {
    location: 'us-central1'
  };

  if (process.env.GCP_PROJECT) {
    vertexAIOptions.project = process.env.GCP_PROJECT;
  }

  const vertexAI = new VertexAI(vertexAIOptions);

  // Use the Imagen 3 text-to-image model.
  const generativeModel = vertexAI.getGenerativeModel({
    model: 'imagen-3.0-generate-002',
  });

  const prompt = `Generate a photorealistic image of this clothing item on a plain white background, suitable for a product catalog. The item should be the main focus. ${input.description}`;
  console.log(prompt);

  try {
    const result = await generativeModel.generateContent(prompt);
    const response = await result.response;
    console.log(response);

    if (!response.candidates || response.candidates.length === 0 || !response.candidates[0].content) {
      throw new Error('No image was generated by Vertex AI for clothing.');
    }

    const imagePart = response.candidates[0].content.parts.find(p => p.inlineData);

    if (!imagePart || !imagePart.inlineData) {
      throw new Error('No image data found in Vertex AI response for clothing.');
    }

    const imageDataUri = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;

    return {imageDataUri};
  } catch (error) {
    console.error('Vertex AI Clothing Prediction Error:', error);
    console.log(error);
    throw new Error('Failed to generate clothing image with Vertex AI.');
  }
}
